AWSTemplateFormatVersion: "2010-09-09"
Description: Network

Parameters:
  TagPrefix:
    Type: String
    Default: orca
  VPCCidrBlock:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCidrBlock:
    Type: String
    Default: 10.0.0.0/24
  PrivateSubnetCidrBlock:
    Type: String
    Default: 10.0.1.0/24
#Mappings:
#Conditions:

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref TagPrefix

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: Name
          Value: !Ref TagPrefix

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      #VpnGatewayId: String

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      #InstanceId: String
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      #Tags:
      #  - Resource Tag
    DependsOn: NatEIP

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref PublicSubnetCidrBlock
      #AssignIpv6AddressOnCreation: false
      #Ipv6CidrBlock: String
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}-public

  # https://docs.aws.amazon.com/vpc/latest/userguide/vpc-recommended-nacl-rules.html#nacl-rules-scenario-2
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}-public

#  PublicNetworkAclEntryIngress100:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PublicNetworkAcl
#      Egress: false
#      RuleNumber : 100
#      CidrBlock: 0.0.0.0/0
#      Protocol: 6
#      PortRange:
#        From: 80
#        To: 80
#      RuleAction : Allow
#  PublicNetworkAclEntryIngress110:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PublicNetworkAcl
#      Egress: false
#      RuleNumber : 110
#      CidrBlock: 0.0.0.0/0
#      Protocol: 6
#      PortRange:
#        From: 443
#        To: 443
#      RuleAction : Allow
  PublicNetworkAclEntryIngress120:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: false
      RuleNumber : 120
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction : Allow
#  PublicNetworkAclEntryIngress130:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PublicNetworkAcl
#      Egress: false
#      RuleNumber : 130
#      CidrBlock: 0.0.0.0/0
#      Protocol: 6
#      PortRange:
#        From: 3389
#        To: 3389
#      RuleAction : Allow
  PublicNetworkAclEntryIngress140:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: false
      RuleNumber : 140
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction : Allow

  PublicNetworkAclEntryEgress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: true
      RuleNumber : 100
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction : Allow
  PublicNetworkAclEntryEgress110:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: true
      RuleNumber : 110
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction : Allow
  PublicNetworkAclEntryEgress120:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: true
      RuleNumber : 120
      CidrBlock: !Ref PrivateSubnetCidrBlock
      Protocol: 6
      PortRange:
        From: 5432 #PostgreSQL
        To: 5432
      RuleAction : Allow
#  PublicNetworkAclEntryEgress140:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PublicNetworkAcl
#      Egress: true
#      RuleNumber : 140
#      CidrBlock: !Ref PrivateSubnetCidrBlock
#      Protocol: 6
#      PortRange:
#        From: 32768
#        To: 65535
#      RuleAction : Allow
#  PublicNetworkAclEntryEgress150:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PublicNetworkAcl
#      Egress: true
#      RuleNumber : 150
#      CidrBlock: !Ref PrivateSubnetCidrBlock
#      Protocol: 6
#      PortRange:
#        From: 22
#        To: 22
#      RuleAction : Allow

  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref PublicNetworkAcl

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}-public
  PublicRouteIgw:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref PrivateSubnetCidrBlock
      #AssignIpv6AddressOnCreation: false
      #Ipv6CidrBlock: String
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}-private

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}-private

  PrivateNetworkAclEntryIngress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      Egress: false
      RuleNumber : 100
      CidrBlock: !Ref PublicSubnetCidrBlock
      Protocol: 6
      PortRange:
        From: 5432 #PostgreSQL
        To: 5432
      RuleAction : Allow
#  PrivateNetworkAclEntryIngress120:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PrivateNetworkAcl
#      Egress: false
#      RuleNumber : 120
#      CidrBlock: !Ref PublicSubnetCidrBlock
#      Protocol: 6
#      PortRange:
#        From: 22
#        To: 22
#      RuleAction : Allow
#  PrivateNetworkAclEntryIngress130:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PrivateNetworkAcl
#      Egress: false
#      RuleNumber : 130
#      CidrBlock: !Ref PublicSubnetCidrBlock
#      Protocol: 6
#      PortRange:
#        From: 3389
#        To: 3389
#      RuleAction : Allow
  PrivateNetworkAclEntryIngress140:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      Egress: false
      RuleNumber : 140
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction : Allow

#  PrivateNetworkAclEntryEgress100:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PrivateNetworkAcl
#      Egress: true
#      RuleNumber : 100
#      CidrBlock: 0.0.0.0/0
#      Protocol: 6
#      PortRange:
#        From: 80
#        To: 80
#      RuleAction : Allow
#  PrivateNetworkAclEntryEgress110:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PrivateNetworkAcl
#      Egress: true
#      RuleNumber : 110
#      CidrBlock: 0.0.0.0/0
#      Protocol: 6
#      PortRange:
#        From: 443
#        To: 443
#      RuleAction : Allow
  PrivateNetworkAclEntryEgress120:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      Egress: true
      RuleNumber : 120
      CidrBlock: !Ref PublicSubnetCidrBlock
      Protocol: 6
      PortRange:
        From: 32768
        To: 65535
      RuleAction : Allow

  PrivateSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}-private
  PrivateRouteNat:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet


  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref TagPrefix
      GroupDescription: !Ref TagPrefix
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: own
      GroupId: !Ref SecurityGroup
      SourceSecurityGroupId: !Ref SecurityGroup
      IpProtocol: -1
  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: all
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: -1

#Outputs:
