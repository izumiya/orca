AWSTemplateFormatVersion: "2010-09-09"
Description: 2 tier Network (Public(for OpenVPN) and Private )

Parameters:
  ResourcePrefix:
    Type: String
    Default: orca
  VPCCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: x.x.0.0/16
    AllowedPattern: ^([0-9]{1,3}\.){2}0\.0\/16$
  OpenVPNClientCidrBlock:
    Type: String
    Default: 10.8.0.0/24
    Description: x.x.x.0/24
    AllowedPattern: ^([0-9]{1,3}\.){3}0\/24$
#Mappings:
#Conditions:

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref ResourcePrefix

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: Name
          Value: !Ref ResourcePrefix

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      #VpnGatewayId: String

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      #InstanceId: String
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      #Tags:
      #  - Resource Tag
    DependsOn: NatEIP

  OpenVPNEIP:
    Type: AWS::EC2::EIP
    Properties:
      #InstanceId: String
      Domain: vpc

  OpenVPNNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: openvpn server
      GroupSet:
        - !Ref OpenVPNSecurityGroup
        - !Ref BaseSecurityGroup
      #PrivateIpAddress: String
      #PrivateIpAddresses:
      #  - PrivateIpAddressSpecification
      #SecondaryPrivateIpAddressCount: Integer
      SourceDestCheck: false
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${ResourcePrefix}-openvpn

  OpenVPNEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt OpenVPNEIP.AllocationId
      NetworkInterfaceId: !Ref OpenVPNNetworkInterface


  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select [0, !Cidr [!Ref VPCCidrBlock, 2, 8 ]]
      #AssignIpv6AddressOnCreation: false
      #Ipv6CidrBlock: String
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ResourcePrefix}-public

  # https://docs.aws.amazon.com/vpc/latest/userguide/vpc-recommended-nacl-rules.html#nacl-rules-scenario-2
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ResourcePrefix}-public

  PublicNetworkAclEntryIngress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: false
      RuleNumber : 100
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction : Allow
  PublicNetworkAclEntryIngress110:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: false
      RuleNumber : 110
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction : Allow
  PublicNetworkAclEntryIngress120:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: false
      RuleNumber : 120
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction : Allow
#  PublicNetworkAclEntryIngress130:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PublicNetworkAcl
#      Egress: false
#      RuleNumber : 130
#      CidrBlock: 0.0.0.0/0
#      Protocol: 6
#      PortRange:
#        From: 3389
#        To: 3389
#      RuleAction : Allow
  PublicNetworkAclEntryIngress140:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: false
      RuleNumber : 140
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 32768
        To: 65535
      RuleAction : Allow

  PublicNetworkAclEntryEgress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: true
      RuleNumber : 100
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction : Allow
  PublicNetworkAclEntryEgress110:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: true
      RuleNumber : 110
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction : Allow
  PublicNetworkAclEntryEgress120:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: true
      RuleNumber : 120
      CidrBlock: !Select [1, !Cidr [!Ref VPCCidrBlock, 2, 8 ]]
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction : Allow
  PublicNetworkAclEntryEgress140:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      Egress: true
      RuleNumber : 140
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction : Allow
#  PublicNetworkAclEntryEgress150:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PublicNetworkAcl
#      Egress: true
#      RuleNumber : 150
#      CidrBlock: !Select [1, !Cidr [!Ref VPCCidrBlock, 2, 8 ]]
#      Protocol: 6
#      PortRange:
#        From: 22
#        To: 22
#      RuleAction : Allow

  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref PublicNetworkAcl

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ResourcePrefix}-public
  PublicRouteIgw:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteOpenVPN:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref OpenVPNClientCidrBlock
      NetworkInterfaceId: !Ref OpenVPNNetworkInterface

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select [1, !Cidr [!Ref VPCCidrBlock, 2, 8 ]]
      #AssignIpv6AddressOnCreation: false
      #Ipv6CidrBlock: String
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ResourcePrefix}-private

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ResourcePrefix}-private

#  PrivateNetworkAclEntryIngress100:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PrivateNetworkAcl
#      Egress: false
#      RuleNumber : 100
#      CidrBlock: !Select [0, !Cidr [!Ref VPCCidrBlock, 2, 8 ]]
#      Protocol: 6
#      PortRange:
#        From: 5432 #PostgreSQL
#        To: 5432
#      RuleAction : Allow
  PrivateNetworkAclEntryIngress120:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      Egress: false
      RuleNumber : 120
      CidrBlock: !Ref OpenVPNClientCidrBlock
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction : Allow
#  PrivateNetworkAclEntryIngress130:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref PrivateNetworkAcl
#      Egress: false
#      RuleNumber : 130
#      CidrBlock: !Select [0, !Cidr [!Ref VPCCidrBlock, 2, 8 ]]
#      Protocol: 6
#      PortRange:
#        From: 3389
#        To: 3389
#      RuleAction : Allow
  PrivateNetworkAclEntryIngress140:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      Egress: false
      RuleNumber : 140
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction : Allow

  PrivateNetworkAclEntryEgress100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      Egress: true
      RuleNumber : 100
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction : Allow
  PrivateNetworkAclEntryEgress110:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      Egress: true
      RuleNumber : 110
      CidrBlock: 0.0.0.0/0
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction : Allow
  PrivateNetworkAclEntryEgress120:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      Egress: true
      RuleNumber : 120
      CidrBlock: !Ref OpenVPNClientCidrBlock
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction : Allow

  PrivateSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ResourcePrefix}-private
  PrivateRouteNat:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateRouteOpenVPN:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Ref OpenVPNClientCidrBlock
      NetworkInterfaceId: !Ref OpenVPNNetworkInterface

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet


  OpenVPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ResourcePrefix}-openvpn
      GroupDescription: !Sub ${ResourcePrefix}-openvpn
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ResourcePrefix}-openvpn
  OpenVPNSecurityGroupIngressHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: https
      GroupId: !Ref OpenVPNSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  OpenVPNSecurityGroupIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: ssh
      GroupId: !Ref OpenVPNSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  BaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ResourcePrefix}-base
      GroupDescription: !Sub ${ResourcePrefix}-base
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ResourcePrefix}-base
  BaseSecurityGroupIngressOwn:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: own
      GroupId: !Ref BaseSecurityGroup
      SourceSecurityGroupId: !Ref BaseSecurityGroup
      IpProtocol: -1
  BaseSecurityGroupIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: vpn ssh
      GroupId: !Ref BaseSecurityGroup
      SourceSecurityGroupId: !Ref OpenVPNSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  BaseSecurityGroupIngressORCA:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: vpn orca
      GroupId: !Ref BaseSecurityGroup
      SourceSecurityGroupId: !Ref OpenVPNSecurityGroup
      IpProtocol: tcp
      FromPort: 8000
      ToPort: 8000
  BaseSecurityGroupEgressAll:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: all
      GroupId: !Ref BaseSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: -1

Outputs:
  OpenVPNEIP:
    Value: !Ref OpenVPNEIP
    Export:
      Name: !Sub ${ResourcePrefix}-OpenVPNEIP
  OpenVPNNetworkInterfaceId:
    Value: !Ref OpenVPNNetworkInterface
    Export:
      Name: !Sub ${ResourcePrefix}-OpenVPNNetworkInterfaceId
  OpenVPNClientCidrBlock:
    Value: !Ref OpenVPNClientCidrBlock
    Export:
      Name: !Sub ${ResourcePrefix}-OpenVPNClientCidrBlock
  PublicSubnetCidrBlock:
    Value: !Select [0, !Cidr [!Ref VPCCidrBlock, 2, 8 ]]
    Export:
      Name: !Sub ${ResourcePrefix}-PublicSubnetCidrBlock
  PrivateSubnetId:
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub ${ResourcePrefix}-PrivateSubnetId
  PrivateSubnetCidrBlock:
    Value: !Select [1, !Cidr [!Ref VPCCidrBlock, 2, 8 ]]
    Export:
      Name: !Sub ${ResourcePrefix}-PrivateSubnetCidrBlock

  BaseSecurityGroup:
    Value: !Ref BaseSecurityGroup
    Export:
      Name: !Sub ${ResourcePrefix}-BaseSecurityGroupId
